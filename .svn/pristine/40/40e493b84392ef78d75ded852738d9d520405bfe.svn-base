package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Complain;
import com.hniois.monitor.service.ComplainService;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;

/**
 * Create By javaMan
 * 2018/8/28  14:47
 * 投诉建议  Controller
 */
@Controller
@RequestMapping(value = "/complain")
public class ComplainController extends BaseController {

    @Resource(name = "complainService")
    private ComplainService complainService;

    private String list = "monitor/complain/complain_list";// 分页列表页面
    private String look = "monitor/complain/complain_look";// 详情查看
    private String reply = "monitor/complain/complain_reply";// 新增修改页面

    /**
     *  进入投诉建议分页列表
     * @param page
     * @return
     */
    @RequestMapping(value = "/toPage")
    public ModelAndView toPage(Page page) {
        ModelAndView mv = getModelAndViewToPage(page);
        mv.setViewName(list);
        return mv;
    }

    /**
     *  投诉建议分页列表
     * @param complain
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String pageList(Complain complain) throws Exception {
        // 当前页
        int currPage = getThisPage(complain.getPage());
        // 每页显示条数
        int limit = getThisLimit(complain.getLimit());
        complain.setOffset((currPage-1) * limit);
        complain.setPageSize(limit);
        Page page = complainService.findPage(complain);
        return JSON.toJSONString(page);
    }

    /**
     * 查看
     * @param complain
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/look")
    public ModelAndView look(Complain complain) throws Exception {
        ModelAndView mv = getModelAndView();
        mv.setViewName(look);
        Complain c = complainService.find(complain);
        mv.addObject("complain", c);
        return mv;
    }

    /**
     * 回复
     * @param complain
     * @return
     */
    @RequestMapping(value = "/reply")
    public ModelAndView reply(Complain complain) throws Exception {
        ModelAndView mv = getModelAndView();
        mv.setViewName(reply);
        if (StringUtils.isNotEmpty(complain.getId())) {
            Complain c = complainService.find(complain);
            mv.addObject("complain", c);
        }
        return mv;
    }

    /**
     * 回复更新数据
     * @return
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public String update(Complain complain) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if (StringUtils.isNotEmpty(complain.getId())) {
            complainService.update(complain);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 单个删除
     * @param complain
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public String delete(Complain complain) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if (StringUtils.isNotEmpty(complain.getId())) {
            complainService.delete(complain);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param complain
     * @return
     */
    @RequestMapping(value = "/deletes")
    @ResponseBody
    public String deletes(Complain complain) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(complain.getData() != null && complain.getData().size() > 0) {
            complainService.deleteBatch(complain);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }
}
