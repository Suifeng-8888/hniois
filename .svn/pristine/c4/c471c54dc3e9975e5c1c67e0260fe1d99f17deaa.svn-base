package com.hniois.web.trace;

import com.hniois.controller.base.BaseController;
import com.hniois.trace.entity.Batch_Material;
import com.hniois.trace.service.BatchManage;
import com.hniois.util.DateUtil;
import com.hniois.util.TwoDimensionCode;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.util.List;

@RestController
@RequestMapping("/webService/batch")
public class BatchActionWeb extends BaseController {
    @Resource(name ="batchService")
    private BatchManage batchService;

    /**
     * 查询用过信息
     * @param e
     * @return
     */
    @RequestMapping("/findList")
    public String findlist(Batch_Material e)throws Exception{

        List<Batch_Material> list = batchService.findList(e);
        JSONArray js = JSONArray.fromObject(list);
        return js.toString();
    }

    /**
     * 查找对象
     *
     * @param e
     * @return
     */
    @RequestMapping("/find")
    public String find(Batch_Material e)throws Exception{

        JSONObject json = getMsg();
        if(StringUtils.isNotEmpty(e.getId())){
            Batch_Material batch_material=batchService.find(e);
            JSONObject js = JSONObject.fromObject(batch_material);
            return js.toString();
        }else{
            setMsg(json,"error","无此对象");
            return json.toString();
        }
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    public String add(Batch_Material e, HttpServletRequest request)throws  Exception{

        JSONObject obj=getMsg();
        //先判断数据库是否已经存在当前对象
        Batch_Material bt=new Batch_Material();
        bt.setBatch_id(e.getBatch_id());
        if(batchService.findCount(bt)>0){
            setMsg(obj,"error","当前对象已存在");
        }else{
            //生成二维码图片并返回图片相对路径
            String savePath=createPic(request,e.getBatch(),e.getBatch());
            //保存图片到对象属性中
            e.setBat_img(savePath);
            batchService.save(e);
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * http://localhost:8080/webService/batch/toEdit?batch_id=1
     * @param e
     * @return
     */
    @RequestMapping("/update")
    public String update(Batch_Material e,HttpServletRequest request){
        JSONObject obj=getMsg();
        Batch_Material batch=new Batch_Material();
        batch.setBatch_id(e.getBatch_id());
        try{
            batch=batchService.find(batch);
            if(batch.getBatch().equals(e.getBatch())){
                //说明批次没改变,无需重新生成二维码图片
                batchService.update(e);
            }else{//说明批次号改变了,则需要将原来的图片删除,并生成新的二维码图片

                //获取路径删除相应的图片
                String delPath  =  request.getRealPath("")+e.getBat_img();
                //删除图片
                File file=new File(delPath);
                if(file.exists()&&file.isFile()){
                    file.delete();
                }
                //重新生成新的二维码图片并返回保存路径
                String savePath=createPic(request,e.getBatch(),e.getBatch());
                //保存
                e.setBat_img(savePath);
                batchService.update(e);
            }

        }catch(Exception ex){
            setMsg(obj,"error","编辑失败");
        }
        return obj.toString();
    }


    /**
     * 单个删除
     * http://localhost:8080/webService/batch/toEdit?batch_id=1
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    public String delete(Batch_Material e,HttpServletRequest request)throws Exception{
        JSONObject obj=getMsg();
        if(e.getBatch_id()!=null) {
            Batch_Material bat = batchService.find(e);
            //获取路径删除相应的图片
            String delPath  =  request.getRealPath("")+bat.getBat_img();
            //删除图片
            File file=new File(delPath);
            if(file.exists()&&file.isFile()){
                file.delete();
            }
            batchService.delete(e);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    public String deletes(Batch_Material e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            batchService.deleteBatch(e);
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }



    /**
     * 批次用量原材料数据追溯
     * @return
     */
    @RequestMapping("/retrospect")
    public String fill(Batch_Material e)throws Exception{
        Batch_Material batch_material=new Batch_Material();
        if(e.getBatch_id()!=null){
            batch_material=batchService.find(e);
        }
        JSONObject js = JSONObject.fromObject(batch_material);
        return js.toString();
    }


    /**
     * 根据图片路径/格式/生成二维码图片
     */
    public String createPic(HttpServletRequest request,String pic_name,String content){
        //获取路径
        String path  =  request.getRealPath("") + "/attached/"+DateUtil.getDays()+"/";
        String savePath  =  request.getContextPath() + "attached/"+DateUtil.getDays()+"/";
        File dirFile = new File(path);
        if (!dirFile.exists()) {
            dirFile.mkdirs();
        }
        //图片路径
        String imgPath =  path +pic_name + ".png";
        String imgPath2 =  savePath + pic_name + ".png";
        //二维码
        TwoDimensionCode handle = new TwoDimensionCode();
        String type = "png";
        handle.encoderQRCode(content,imgPath,type);
        return imgPath2;
    }
}

