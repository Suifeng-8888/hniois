package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Harvest;
import com.hniois.monitor.entity.Soil;
import com.hniois.monitor.service.HarvestManage;
import com.hniois.monitor.service.SoilManage;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.SessionManager;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping("/pick")
public class HarvestAction extends BaseController {

    @Resource(name="harvestService")
    private HarvestManage harvestService;

    @Resource(name="soilService")
    private SoilManage soilService;

    String hart_list="monitor/harvest/harvest_list";
    String hart_edit="monitor/harvest/harvest_edit";
    String hart_table="monitor/harvest/seed_table";

    @RequestMapping("/toPage")
    @ResponseBody
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(hart_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @ResponseBody
    @RequestMapping("/list")
    public String showPage(Harvest e)throws Exception{
        //获取当前页
        int current=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        e.setOffset((current-1)*limit);
        e.setPagerSize(limit);//每页显示记录数
        Page page = harvestService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Harvest e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Harvest hart=new Harvest();
        hart.setFarm_id(SessionManager.getFarmID());
        if(StringUtils.isNotEmpty(e.getId())){
            hart=harvestService.find(e);
        }
        hart.setCode(e.getCode());
        mv.addObject("hart",hart);
        mv.setViewName(hart_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Harvest e)throws  Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getId())){
            //如果id不为空,则判断当前对象是否已经存在
            Harvest har=new Harvest();
            har.setId(e.getId());
            if(harvestService.findCount(har)>0){
                setMsg(obj,"error","当前对象已存在");
            }else{
                //自动生成采摘批次
                String batch=SessionManager.getFarmID()+DateUtil.getTimes();
                e.setBatch(batch);
                harvestService.save(e);
            }
        }else{
            //自动生成采摘批次
            String batch=SessionManager.getFarmID()+DateUtil.getTimes();
            e.setBatch(batch);
            harvestService.save(e);
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Harvest e) throws Exception{
        JSONObject obj=getMsg();
       if(StringUtils.isNotEmpty(e.getId())){
            harvestService.update(e);
        }else{
            setMsg(obj,"error","ID不能为空");
        }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Harvest e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getId()!=null) {
            harvestService.delete(e);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Harvest e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            harvestService.deleteBatch(e);
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }

    /**
     * 选择播种的表进行采摘
     * @param e
     * @return
     */
    @RequestMapping("/choose")
    public ModelAndView chose1(Harvest e){
        ModelAndView mv=this.getModelAndView();
        mv.setViewName(hart_table);
        return mv;
    }



    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Harvest e) throws Exception {
        //导出工具
        ExportExcelUtil<Harvest> export = new ExportExcelUtil<Harvest>();
        //文件名称
        String filename = "harvestList" + DateUtil.getTimes();
        //导出数据信息
        List list = harvestService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }

    /**
     * 农产品送检
     * @param e
     * @return
     */
    /*@RequestMapping("/sendcheck")
    @ResponseBody
    public String sendCheck(Harvest e){
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            //根据ids获取要送检的对象名称和批次并添加到检验报告管理数据表中

            //更改对象的送检状态为已送检

        }else{
            //送检失败,不做任何操作,返回提示信息
           setMsg(obj,"error","送检失败");
        }

        return obj.toString();
    }*/
}
