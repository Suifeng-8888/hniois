package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Certificate;
import com.hniois.monitor.entity.Providers;
import com.hniois.monitor.service.CertificateManage;
import com.hniois.monitor.service.ProvidersManage;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.SessionManager;
import com.hniois.util.UuidUtil;
import jdk.nashorn.internal.ir.Labels;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping("/cerficate")
public class CertificateAction extends BaseController {

    @Resource(name="certificateService")
    private CertificateManage certifiteService;
    @Resource(name="providersService")
    private ProvidersManage providerService;
    private String c_list="monitor/certificate/c_list";
    private String c_edit="monitor/certificate/c_edit";
    private String c_img="monitor/certificate/c_img";

    @RequestMapping("/toPage")
    @ResponseBody
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(c_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @ResponseBody
    @RequestMapping("/list")
    public String showPage(Certificate e)throws Exception{
        e.setFarm_id(SessionManager.getFarmID());
        //获取当前页
        int current=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        e.setOffset((current-1)*limit);
        e.setPagerSize(limit);//每页显示记录数
        Page page = certifiteService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Certificate e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Certificate cate=new Certificate();
        if(StringUtils.isNotEmpty(e.getMid())){
            cate=certifiteService.find(e);
        }
        cate.setCode(e.getCode());
        mv.addObject("cerficate",cate);
        mv.setViewName(c_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Certificate e)throws  Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
            Providers p=new Providers();
            p.setP_id(SessionManager.getFarmID());
            p=providerService.find(p);
            e.setCompany(p.getP_name());
            e.setMid(UuidUtil.get32UUID());
            e.setM_time(DateUtil.getDay());
            if(!StringUtils.isNotEmpty(e.getM_person())){
                e.setM_person(SessionManager.getUsername());
            }
            certifiteService.save(e);
        }else{
           setMsg(obj,"error","非农产品基地不能新增");
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Certificate e)throws Exception{
        JSONObject obj=getMsg();
            if (StringUtils.isNotEmpty(e.getMid())){
                Certificate ct=new Certificate();
                ct.setMid(e.getMid());
                if(certifiteService.findCount(ct)>0){
                    certifiteService.update(e);
                }else{
                    setMsg(obj,"error","对象不存在");
                }

            }else{
                setMsg(obj,"error","ID不能为空");
            }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Certificate e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getMid()!=null) {
            certifiteService.delete(e);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Certificate e) throws Exception {
        e.setFarm_id(SessionManager.getFarmID());
        //导出工具
        ExportExcelUtil<Certificate> export = new ExportExcelUtil<Certificate>();
        //文件名称
        String filename = "certifiteList" + DateUtil.getTimes();
        //导出数据信息
        List list = certifiteService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }

    /**
     * 资质证书图片
     * @param e 学校信息
     */
    @RequestMapping(value="/toEditImgs")
    public ModelAndView toEditImgs(Certificate e) throws Exception{
        ModelAndView mv = this.getModelAndView();
        Certificate ct = new Certificate();
        if(StringUtils.isNotEmpty(e.getMid())){
            ct = certifiteService.find(e);
        }
        mv.addObject("certificate",ct);
        mv.setViewName(c_img);
        return mv;
    }
}

