package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Poison;
import com.hniois.monitor.service.PoisonManage;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping("/poison")
public class PoisonAction extends BaseController {

    @Resource(name="poisonService")
    private PoisonManage poisonService;

    String poison_list="monitor/poison/poison_list";
    String poison_edit="monitor/poison/poison_edit";
    String seed_table="monitor/poison/seed_table";
    String buy_table="monitor/poison/buy_table";

    @RequestMapping("/toPage")
    @ResponseBody
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(poison_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @ResponseBody
    @RequestMapping("/list")
    public String showPage(Poison e)throws Exception{
        //获取当前页
        int current=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        e.setOffset((current-1)*limit);
        e.setPagerSize(limit);//每页显示记录数
        Page page = poisonService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Poison e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Poison poison=new Poison();
        if(StringUtils.isNotEmpty(e.getId())){
            poison=poisonService.find(e);
        }
        poison.setCode(e.getCode());
        mv.addObject("poison",poison);
        mv.setViewName(poison_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Poison e)throws  Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getId())){
            //如果id不为空,则判断对象是否已存在
            Poison p=new Poison();
            p.setId(e.getId());
            if(poisonService.findCount(p)>0){
                setMsg(obj,"error","当前对象已存在");
            }else{
                poisonService.save(e);
            }
        }else{
            poisonService.save(e);
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Poison e){
        JSONObject obj=getMsg();
        try{
            poisonService.update(e);
        }catch(Exception ex){
            setMsg(obj,"error","编辑失败");
        }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Poison e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getId()!=null) {
            poisonService.delete(e);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Poison e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            poisonService.deleteBatch(e);
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }

    /**
     * 从播种列表选择打药的作物名称
     * @param e
     * @return
     */
    @RequestMapping("/choose")
    public ModelAndView chose(Poison e){
        ModelAndView mv=this.getModelAndView();
        mv.setViewName(seed_table);
        return mv;
    }

    /**
     * 从采购列表选择使用的农药
     * @param e
     * @return
     */
    @RequestMapping("/chooses")
    public ModelAndView chose1(Poison e){
        ModelAndView mv=this.getModelAndView();
        mv.setViewName(buy_table);
        return mv;
    }

    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Poison e) throws Exception {
        //导出工具
        ExportExcelUtil<Poison> export = new ExportExcelUtil<Poison>();
        //文件名称
        String filename = "poisonList" + DateUtil.getTimes();
        //导出数据信息
        List list = poisonService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }
}
