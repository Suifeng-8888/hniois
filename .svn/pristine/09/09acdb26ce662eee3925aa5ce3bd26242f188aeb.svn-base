package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Report;
import com.hniois.monitor.service.ReportManage;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.SessionManager;
import com.hniois.util.UuidUtil;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * 检测报告
 */
@Controller
@RequestMapping("/report")
public class ReportAction extends BaseController{
    @Resource(name="reportService")
    private ReportManage reportService;

    String report_list="monitor/report/report_list";
    String report_edit="monitor/report/report_edit";
    String report_look="monitor/report/report_look";
    String report_img="monitor/report/report_img";
    String crop_table="monitor/report/crop_table";

    @RequestMapping("/toPage")
    @ResponseBody
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(report_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @ResponseBody
    @RequestMapping("/list")
    public String showPage(Report e)throws Exception{
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        //获取当前页
        int current=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        e.setOffset((current-1)*limit);
        e.setPagerSize(limit);//每页显示记录数
        Page page = reportService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Report e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Report report=new Report();
        if(StringUtils.isNotEmpty(e.getRid())){
            report=reportService.find(e);
        }
        report.setCode(e.getCode());
        mv.addObject("report",report);
        mv.setViewName(report_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Report e, HttpServletRequest request)throws  Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        if(!StringUtils.isNotEmpty(e.getRid())){
            String uid= UuidUtil.get32UUID();
            e.setRid(uid);
            if(StringUtils.isNotEmpty(e.getCrop_id())){
                reportService.save(e);
            }else{
                setMsg(obj,"error","请从数据列表选择数据");
            }
        }else{
            setMsg(obj,"error","新增失败");
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Report e) throws Exception{
        JSONObject obj=getMsg();
            if(StringUtils.isNotEmpty(e.getRid())){
                Report rp=new Report();
                rp.setRid(e.getRid());
                if(reportService.findCount(rp)>0){
                    reportService.update(e);
                }else{
                    setMsg(obj,"error","对象不存在");
                }

            }else{
                setMsg(obj,"error","ID不能为空");
            }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Report e)throws Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getRid())) {
            reportService.delete(e);
        }else {
            setMsg(obj, "error", "ID不能为空");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Report e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            reportService.deleteBatch(e);//批量删除
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }


    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Report e) throws Exception {
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        //导出工具
        ExportExcelUtil<Report> export = new ExportExcelUtil<Report>();
        //文件名称
        String filename = "poisonList" + DateUtil.getTimes();
        //导出数据信息
        List list = reportService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }

    /**
     * 选择农产品
     */
    @RequestMapping("/choose")
    public ModelAndView jump(Report e){
        ModelAndView mv=getModelAndView();
        mv.setViewName(crop_table);
        return mv;
    }

    /**
     * 检验报告图片
     * @param e 学校信息
     */
    @RequestMapping(value="/toEditImgs")
    public ModelAndView toEditImgs(Report e) throws Exception{
        ModelAndView mv = this.getModelAndView();
        Report report = new Report();
        if(StringUtils.isNotEmpty(e.getRid())){
            report = reportService.find(e);
        }
        mv.addObject("report",report);
        mv.setViewName(report_img);
        return mv;
    }

    /**
     * 监管机构查看检测报告
     * @param e
     * @return
     */
    @RequestMapping("/toLook")
    @ResponseBody
    public ModelAndView look(Report e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Report report=new Report();
        if(StringUtils.isNotEmpty(e.getReport_num())){
            report=reportService.find(e);
        }
        report.setCode(e.getCode());
        mv.addObject("report",report);
        mv.setViewName(report_look);
        return mv;
    }
}
