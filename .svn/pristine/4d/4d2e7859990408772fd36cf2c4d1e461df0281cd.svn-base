package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Butcher;
import com.hniois.monitor.entity.Inspect;
import com.hniois.monitor.service.ButcherManage;
import com.hniois.monitor.service.InspectManage;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.SessionManager;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping("/butcher")
public class ButcherAction extends BaseController {

    @Resource(name="butcherService")
    private ButcherManage butcherService;

    @Resource(name="inspectService")
    private InspectManage inspectService;

    String butcher_list="monitor/butcher/butcher_list";
    String butcher_edit="monitor/butcher/butcher_edit";
    String butcher_table="monitor/butcher/butcher_table";
    String butcher_detail="monitor/butcher_detail/butcher_detail";


    @RequestMapping("/toPage")
    @ResponseBody
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(butcher_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @ResponseBody
    @RequestMapping("/list")
    public String showPage(Butcher e)throws Exception{
        e.setFarm_id(SessionManager.getFarmID());
        //获取当前页
        int current=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        e.setOffset((current-1)*limit);
        e.setPagerSize(limit);//每页显示记录数
        Page page = butcherService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Butcher e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Butcher butcher=new Butcher();
        if(StringUtils.isNotEmpty(e.getBut_id())){
            butcher=butcherService.find(e);
        }
        butcher.setCode(e.getCode());
        mv.addObject("butcher",butcher);
        mv.setViewName(butcher_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Butcher e)throws  Exception{
        e.setFarm_id(SessionManager.getFarmID());
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getBut_id())){
            //如果id不为空,则判断当前对象是否已经存在
            Butcher bred=new Butcher();
            bred.setId(e.getBut_id());
            if(butcherService.findCount(bred)>0){
                setMsg(obj,"error","当前对象已存在");
            }else{
                butcherService.save(e);
            }
        }else{
            if(e.getBred_name().indexOf(",")>0){
                String[] names=e.getBred_name().split(",");
                String[] ids=e.getBreed_id().split(",");
                String[] ages=e.getBred_age().split(",");
                for(int i=0;i<names.length;i++){
                    e.setBred_name(names[i]);
                    e.setBreed_id(ids[i]);
                    e.setBred_age(ages[i]);
                    butcherService.save(e);
                }
            }else{
                butcherService.save(e);
            }

        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Butcher e)throws Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getBut_id())){
            butcherService.update(e);
        }else{
            setMsg(obj,"error","ID不能为空");
        }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Butcher e)throws Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getBut_id())) {
            butcherService.delete(e);
            //同时删除附带的疫苗信息
            Inspect inspect=new Inspect();
            inspect.setBut_id(e.getBut_id());
            inspectService.delete(inspect);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Butcher e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            butcherService.deleteBatch(e);
            //同时删除附带疫苗信息
            for(int i=0;i<e.getData().size();i++){
                Inspect inspect=new Inspect();
                inspect.setBut_id((String) e.getData().get(i));
                inspectService.delete(inspect);
            }
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }

    /**
     * 从养殖厂选择家畜
     * @param e
     * @return
     */
    @RequestMapping("/choose")
    public ModelAndView chose1(Butcher e){
        ModelAndView mv=this.getModelAndView();
        mv.setViewName(butcher_table);
        return mv;
    }

    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Butcher e) throws Exception {
        e.setFarm_id(SessionManager.getFarmID());
        //导出工具
        ExportExcelUtil<Butcher> export = new ExportExcelUtil<Butcher>();
        //文件名称
        String filename = "butcherList" + DateUtil.getTimes();
        //导出数据信息
        List list = butcherService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }

    /**
     * 屠宰检疫情况
     */

    @RequestMapping("/detail")
    public ModelAndView detail(Butcher e) throws Exception{
        ModelAndView mv=getModelAndView();
        Butcher butcher=butcherService.find(e);
        mv.addObject("butcher",butcher);
        mv.setViewName(butcher_detail);
        return mv;
    }
}
