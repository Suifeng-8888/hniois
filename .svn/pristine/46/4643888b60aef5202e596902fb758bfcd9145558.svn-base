package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Outfit;
import com.hniois.monitor.entity.Providers;
import com.hniois.monitor.entity.Recall;
import com.hniois.monitor.service.OutfitService;
import com.hniois.monitor.service.ProvidersManage;
import com.hniois.monitor.service.RecallService;
import com.hniois.util.Const;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.SessionManager;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

/**
 * Create By javaMan
 * 2018/10/15  14:39
 * 产品召回
 */
@Controller
@RequestMapping(value = "/recall")
public class RecallController extends BaseController {

    @Resource(name = "recallService")
    private RecallService recallService;  // 产品召回  service

    @Resource(name = "outfitService")
    private OutfitService outfitService;  // 监管机构 service

    private String list = "monitor/recall/recall_list";// 分页列表页面
    private String edit = "monitor/recall/recall_edit";// 新增修改页面
    private String recall_crop = "monitor/recall/recall_crop";// 召回编辑
    private String recall_add = "monitor/recall/recall_add";// 新增修改页面
    private String crop_table = "monitor/recall/crop_table";// 选择召回产品
    private String farm_table = "monitor/recall/farm_table";// 选择生产基地
    private String error="error";

    @RequestMapping(value = "/toPage")
    public ModelAndView toPage(Page page) {
        ModelAndView mv = getModelAndViewToPage(page);
        mv.setViewName(list);
        return mv;
    }

    @RequestMapping(value = "/list")
    @ResponseBody
    public String pageList(Recall recall) throws Exception {
        // 当前页
        int currPage = getThisPage(recall.getPage());
        // 每页显示条数
        int limit = getThisLimit(recall.getLimit());
        recall.setOffset((currPage-1) * limit);
        recall.setPageSize(limit);
        Page page = recallService.findPage(recall);
        return JSON.toJSONString(page);
    }

    /**
     * 新增or编辑
     * @param e
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView addORUpd(Recall e) throws Exception {
        ModelAndView mv = getModelAndView();
        Recall recall = new Recall();
        if(StringUtils.isNotEmpty(e.getR_id())){
            recall = recallService.find(e);
        }
        recall.setCode(e.getCode());
        mv.addObject("recall", recall); // 产品召回信息
        mv.setViewName(edit);
        return mv;
    }

    /**
     * 召回编辑
     * @param e
     * @return
     * @throws Exception
     */
   /* @RequestMapping(value="/call")
    public ModelAndView recall(Recall e) throws Exception {
        ModelAndView mv = getModelAndView();
        Recall recall = new Recall();
        if(StringUtils.isNotEmpty(e.getR_id())){
            recall = recallService.find(e);
        }
        recall.setCode(e.getCode());
        mv.addObject("recall", recall); // 产品召回信息
        mv.setViewName(recall_crop);
        return mv;
    }*/

    /**
     * 新增召回
     * @param e
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/add")
    public ModelAndView add(Recall e) throws Exception {
        ModelAndView mv = getModelAndView();
        Recall recall = new Recall();
        recall.setStatus("待召回");
        //获取当前发布机构名称
        if(Const.OUTFIT_ADMIN.equals(SessionManager.getUserType())){
            String org_id=SessionManager.getFarmID();
            String org_name = SessionManager.getFarmName();
            Outfit oft=new Outfit();
            oft.setId(org_id);
           oft= outfitService.find(oft);
            recall.setRank(oft.getGrade());
            recall.setOrg_id(org_id);
            recall.setOrg_name(org_name);
            mv.addObject("recall", recall); // 产品召回信息
            mv.setViewName(recall_add);
        }else if(Const.ADMINISTRATOR.equals(SessionManager.getUserType())){

            String org_name = "超级管理员";
            recall.setOrg_name(org_name);
            mv.addObject("recall", recall); // 产品召回信息
            mv.setViewName(recall_add);
        }else{
            mv.setViewName(error);
        }
        return mv;
    }

    @RequestMapping(value = "/save")
    @ResponseBody
    public String save(Recall recall) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(recallService.findCount(recall)>0){
            setMsg(obj,"error","新增产品已存在");
        }else{
            recallService.save(recall);
        }
        return obj.toString();
    }

    @RequestMapping(value = "/update")
    @ResponseBody
    public String update(Recall recall) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(recall.getR_id())) {
            recallService.update(recall);
        } else {
            setMsg(obj, "error", "ID不能为空...");
        }
        return obj.toString();
    }

    @RequestMapping(value = "/delete")
    @ResponseBody
    public String delete(Recall recall) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(recall.getR_id())) {
            recallService.delete(recall);
        } else {
            setMsg(obj, "error", "ID不能为空...");
        }
        return obj.toString();
    }

    @RequestMapping(value = "/deletes")
    @ResponseBody
    public String deletes(Recall recall) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(recall.getData().size() > 0) {
            recallService.deleteBatch(recall);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 选择生产基地
     * @return
     */
    @RequestMapping("/farm")
    public ModelAndView chose() {
        ModelAndView mv = getModelAndView();
        mv.setViewName(farm_table);
        return mv;
    }

    /**
     * 选择召回产品
     * @return
     */
    @RequestMapping("/crop")
    public ModelAndView cpdd() {
        ModelAndView mv = getModelAndView();
        mv.setViewName(crop_table);
        return mv;
    }

    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Recall e) throws Exception {
        if(Const.PROVIDER_ADMIN.equals(SessionManager.getUserType())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        //导出工具
        ExportExcelUtil<Recall> export = new ExportExcelUtil<Recall>();
        //文件名称
        String filename = "recallList" + DateUtil.getTimes();
        //导出数据信息
        List list = recallService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }

}
