package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.*;
import com.hniois.monitor.service.*;
import com.hniois.util.DateUtil;
import com.hniois.util.SessionManager;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

/**
 * Create By javaMan
 * 2018/12/3  9:18
 * 基地准出   controller
 */
@Controller
@RequestMapping(value = "/output")
public class OutputController extends BaseController {

    @Resource(name = "outputService")
    private OutputService outputService; // 基地准出  service

    @Resource(name = "providersService")
    private ProvidersManage providersService; // 企业基地 service

    @Resource(name = "cropService")
    private CropsManage cropService; // 企业基地产品

    @Resource(name = "reportService")
    private ReportManage reportService; // 检测报告

    @Resource(name = "outfitService")
    private OutfitService outfitService; // 监管部门

    private String list = "monitor/output/output_list";  // 基地准出页面
    private String verify_list = "monitor/output/verify_list";  // 基地准出审核页面
    private String edit = "monitor/output/output_edit";  // 基地准出查看,新增,修改页面
    private String verify_edit = "monitor/output/verify_edit";  // 基地准出查看,新增,修改页面


    /**
     * 进入分页列表页面
     * @return
     */
    @RequestMapping(value = "/toPage")
    public ModelAndView toPage(Page page) {
        ModelAndView mv = getModelAndViewToPage(page);
        mv.setViewName(list);
        return mv;
    }

    /**
     * 分页数据
     * @param output
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String pageList(Output output) throws Exception {
        output.setBase_id(SessionManager.getFarmID());  // 设置当前生产基地
        // 当前页
        int currPage = getThisPage(output.getPage());
        // 每页显示条数
        int limit = getThisLimit(output.getLimit());
        output.setOffset((currPage-1) * limit);
        output.setPageSize(limit);
        Page page = outputService.findPage(output);
        return JSON.toJSONString(page);
    }

    /**
     * 进入准出审核分页列表页面
     * @return
     */
    @RequestMapping(value = "/toVerify")
    public ModelAndView toVerify(Page page) {
        ModelAndView mv = getModelAndViewToPage(page);
        mv.setViewName(verify_list);
        return mv;
    }

    /**
     *  准出审核分页数据
     * @param output
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/verifyList")
    @ResponseBody
    public String verifyList(Output output) throws Exception {
//        if("".equals(output.getVerify_status()) || output.getVerify_status() == null) {
//            output.setVerify_status(1);  // 设置需要待审核状态的数据
//        }
        // 当前页
        int currPage = getThisPage(output.getPage());
        // 每页显示条数
        int limit = getThisLimit(output.getLimit());
        output.setOffset((currPage-1) * limit);
        output.setPageSize(limit);
        Page page = outputService.findPage(output);
        return JSON.toJSONString(page);
    }

    /**
     * 基地准出审核页面
     * @return
     */
    @RequestMapping(value = "/verifyEdit")
    public ModelAndView toVerify(String id) throws Exception {
        ModelAndView mv = getModelAndView();
        List<Outfit> outfits = outfitService.findList(new Outfit());
        mv.addObject("outfits", outfits);// 监管部门
        mv.addObject("id", id); //  基地准出信息id
        mv.setViewName(verify_edit);
        return mv;
    }

    /**
     * 新增 or 修改    页面
     * @param output
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView addORUpd(Output output) throws Exception {
        ModelAndView mv = getModelAndView();
//        企业基地信息
        Providers providers = new Providers();
        providers.setP_id(StringUtils.isEmpty(SessionManager.getFarmID()) ? "" : SessionManager.getFarmID());
        providers = providersService.find(providers);

//        企业产品信息
        Crops crops = new Crops();
        crops.setFarm_id(SessionManager.getFarmID());
        List<Crops> cropList = cropService.findList(crops);

//        产品检测信息
        Report report = new Report();
        report.setFarm_id(StringUtils.isEmpty(SessionManager.getFarmID()) ? "" : SessionManager.getFarmID());
        report.setResult("0"); // 设置产品检测合格的
        List<Report> reports = reportService.findList(report);

        Output op = new Output();
        if (StringUtils.isNotEmpty(output.getId())) {
            op = outputService.find(output);
        }
        op.setCode(output.getCode());  // 判断：0查看 or 1 增加/修改
        mv.addObject("providers", providers);
        mv.addObject("output", op);
        mv.addObject("cropList", cropList);
        mv.addObject("reports", reports);

        mv.setViewName(edit);
        return mv;
    }

    /**
     * 基地准出申请添加
     * @param output
     * @return
     */
    @RequestMapping(value = "/add")
    @ResponseBody
    public String add(Output output) throws Exception {
        JSONObject obj = getMsg();//返回信息
        outputService.save(output);
        return obj.toString();
    }

    /**
     * 基地准出修改
     * @param output
     * @return
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public String update(Output output) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(output.getId())) {
            outputService.update(output);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 基地准出审核
     * @param output
     * @return
     */
    @RequestMapping(value = "/upVerify")
    @ResponseBody
    public String verifyUpdate(Output output) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(output.getId())) {
            output.setVerify_time(DateUtil.getDay());
            outputService.update(output);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 基地准出删除
     * @param output
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public String delete(Output output) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(output.getId())) {
            outputService.delete(output);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

}
