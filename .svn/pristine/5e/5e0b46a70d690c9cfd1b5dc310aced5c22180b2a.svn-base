package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Outfit;
import com.hniois.monitor.service.OutfitService;
import com.hniois.util.Const;
import com.hniois.util.SessionManager;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;

/**
 * Create By javaMan
 * 2018/8/24  10:41
 * 监管部门 controller
 */
@Controller
@RequestMapping(value = "/outfit")
public class OutfitController extends BaseController{

//    监管部门  Service
    @Resource(name = "outfitService")
    private OutfitService outfitService;

    private String list = "monitor/outfit/outfit_list";// 分页列表页面
    private String edit = "monitor/outfit/outfit_edit";// 新增修改页面

    /**
     * 进入监管部门分页列表页面
     * @return
     */
    @RequestMapping(value = "/toPage")
    public ModelAndView toPage(Page page) {
        ModelAndView mv = getModelAndViewToPage(page);
        mv.setViewName(list);
        return mv;
    }

    /**
     * 监管部门分页数据
     * @param outfit
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String pageList(Outfit outfit) throws Exception {
        if(Const.OUTFIT_ADMIN.equals(SessionManager.getUserType())){
            //获取当前监管机构对象
            Outfit oft=new Outfit() ;
            oft.setId(SessionManager.getFarmID());//监管机构ID
            oft.setName(SessionManager.getFarmName());//监管机构名称
            oft=outfitService.find(oft);
            //获取监管机构登记
            if(oft.getGrade().equals("2")){//说明是区级机构
                //设置要查询的生产基地区域
                outfit.setArea(oft.getArea());
            }else if(oft.getGrade().equals("3")){//说明是市级机构
                outfit.setP_city(oft.getP_city());
            }
        }
        // 当前页
        int currPage = getThisPage(outfit.getPage());
        // 每页显示条数
        int limit = getThisLimit(outfit.getLimit());
        outfit.setOffset((currPage-1) * limit);
        outfit.setPageSize(limit);
        Page page = outfitService.findPage(outfit);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 修改    页面
     * @param e
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView addORUpd(Outfit e) throws Exception {
        ModelAndView mv = getModelAndView();
        Outfit outfit = new Outfit();
        if (StringUtils.isNotEmpty(e.getId())) {
            outfit = outfitService.find(e);
        }
        outfit.setCode(e.getCode());  // 判断：0查看 or 1 增加/修改
        mv.addObject("outfit", outfit);
        mv.setViewName(edit);
        return mv;
    }

    /**
     * 新增监管机构信息
     * @param outfit
     * @return
     */
    @RequestMapping(value = "/add")
    @ResponseBody
    public String add(Outfit outfit) throws Exception {
        JSONObject obj = getMsg();//返回信息
        outfitService.save(outfit);
        return obj.toString();
    }

    /**
     * 监管机构修改
     * @param outfit
     * @return
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public String update(Outfit outfit) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(outfit.getId())) {
            outfitService.update(outfit);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 单个删除
     * @param outfit
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public String delete(Outfit outfit) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(StringUtils.isNotEmpty(outfit.getId())) {
            outfitService.delete(outfit);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param outfit
     * @return
     */
    @RequestMapping(value = "/deletes")
    @ResponseBody
    public String deletes(Outfit outfit) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(outfit.getData() != null && outfit.getData().size() > 0) {
            outfitService.deleteBatch(outfit);
        } else {
            setMsg(obj, "error", "参数不能为空...");
        }
        return obj.toString();
    }
}
