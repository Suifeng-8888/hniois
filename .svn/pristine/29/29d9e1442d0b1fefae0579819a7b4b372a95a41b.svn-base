package com.hniois.monitor.controller;


import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Buy;
import com.hniois.monitor.service.BuyManage;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping(value="/buy")
public class BuyAction extends BaseController{
    //Buy
    @Resource(name="BuyService")
    private BuyManage BuyService;

    private String buy_list = "monitor/buy/buy_list";
    private String buy_edit = "monitor/buy/buy_edit";
    private String buy_table = "monitor/buy/buy_table";

    @RequestMapping(value="/toPage")
    public ModelAndView toPage(Page e){
        ModelAndView mv = getModelAndViewToPage(e);
        mv.setViewName(buy_list);
        return mv;
    }
    @RequestMapping(value="/toTable")
    public ModelAndView toTable(Buy e){
        ModelAndView mv = getModelAndViewToPage(e);
        mv.setViewName(buy_table);
        return mv;
    }
    /**
     * 分页查询
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value = "/list")
    @ResponseBody
    public String list(Buy e) throws Exception{
        // 当前页
        int currPage = getThisPage(e.getPage());
        // 每页显示条数
        int limit = getThisLimit(e.getLimit());

        e.setOffset((currPage-1)*limit);
        e.setPageSize(limit);
        Page page = BuyService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 查询List
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/findList")
    @ResponseBody
    public String findList(Buy e) throws Exception {
        List<Buy> list = BuyService.findList(e);
        JSONArray arr = JSONArray.fromObject(list);
        return arr.toString();
    }

    /**
     * 查询count
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/findCount")
    @ResponseBody
    public String findCount(Buy e) throws Exception {
        Integer count = BuyService.findCount(e);
        return String.valueOf(count);
    }

    /**
     * 查询
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/find")
    @ResponseBody
    public String find(Buy e) throws Exception {
        Buy m = BuyService.find(e);
        JSONObject obj = JSONObject.fromObject(m);
        return obj.toString();
    }


    /**
     * 跳转
     * @param e          参数
     * @return           新增 or 保存页面
     */
    @RequestMapping(value="/toEdit")
    public ModelAndView toAorU(Buy e) throws Exception{
        ModelAndView mv = this.getModelAndView();
        Buy buy = new Buy();
        if(StringUtils.isNotEmpty(e.getId())){
            buy = BuyService.find(e);
        }
        buy.setCode(e.getCode());//判断：0查询 or 1 增加/修改
        mv.addObject("Buy",buy);
        mv.setViewName(buy_edit);
        return mv;
    }

    /**
     * 保存
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/add")
    @ResponseBody
    public String add(Buy e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        BuyService.save(e);
        return obj.toString();
    }

    /**
     * 修改
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/update")
    @ResponseBody
    public String update(Buy e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        Buy p = new Buy();
        p.setId(e.getId());
        //条件判断
        List<Buy> list = BuyService.findList(p);
        if(list != null && list.size() > 0 && !(list.get(0).getId().equals(e.getId()))){
            setMsg(obj,"error","操作失败!");
        }else{
            BuyService.update(e);
        }
        return obj.toString();
    }

    /**
     * 删除
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/delete")
    @ResponseBody
    public String delete(Buy e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(e==null){
            setMsg(obj,"error","操作失败!");
            return obj.toString();
        }
        BuyService.delete(e);
        return obj.toString();
    }

    /**
     * 删除
     * @param e          参数
     * @return           json字符串
     * */
    @RequestMapping(value="/deletes")
    @ResponseBody
    public String deletes(Buy e) throws Exception {
        JSONObject obj = getMsg();//返回信息
        if(e==null){
            setMsg(obj,"error","操作失败!");
            return obj.toString();
        }
        BuyService.deleteBatch(e);
        return obj.toString();
    }

}