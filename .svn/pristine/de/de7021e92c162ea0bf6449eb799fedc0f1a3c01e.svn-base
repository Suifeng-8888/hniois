package com.hniois.web.monitor;

import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Handle;
import com.hniois.monitor.entity.Harvest;
import com.hniois.monitor.entity.Soil;
import com.hniois.monitor.service.HarvestManage;
import com.hniois.monitor.service.SoilManage;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.util.List;

@RestController
@RequestMapping("/webService/pick")
public class HarvestActionWeb extends BaseController {

    @Resource(name="harvestService")
    private HarvestManage harvestService;

    @Resource(name="soilService")
    private SoilManage soilService;
    /**
     * 查询用过信息
     * @param e
     * @return
     */
    @RequestMapping("/findList")
    public String findlist(Harvest e)throws Exception{

        List<Harvest> list = harvestService.findList(e);
        JSONArray js = JSONArray.fromObject(list);
        return js.toString();
    }

    /**
     * 查找对象
     * http://localhost:8080/webService/batch/find?batch_id=1
     * @param e
     * @return
     */
    @RequestMapping("/find")
    public String find(Harvest e)throws Exception{
        JSONObject json = getMsg();
        if(StringUtils.isNotEmpty(e.getId())){
            Harvest har=new Harvest();
            har.setId(e.getId());
            if(harvestService.findCount(har)>0){
                Harvest hv=harvestService.find(e);
                JSONObject js = JSONObject.fromObject(hv);
                return js.toString();
            }else{
                setMsg(json,"error","对象不存在");
            }
        }else{
            setMsg(json,"error","ID不能为空");

        }
         return json.toString();
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    public String add(Harvest e)throws  Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getId())){
            //如果id不为空,则判断当前对象是否已经存在
            Harvest har=new Harvest();
            har.setId(e.getId());
            if(harvestService.findCount(har)>0){
                setMsg(obj,"error","当前对象已存在");
            }else{
                harvestService.save(e);
            }
        }else{
            harvestService.save(e);
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    public String update(Harvest e)throws Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getId())){
            Harvest har=new Harvest();
            har.setId(e.getId());
            if(harvestService.findCount(har)>0){
                harvestService.update(e);
            }else{
                setMsg(obj,"error","对象不存在");
            }
        }else{
            setMsg(obj,"error","ID不能为空");
        }

        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    public String delete(Harvest e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getId()!=null) {
            harvestService.delete(e);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    public String deletes(Harvest e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            harvestService.deleteBatch(e);
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }

}
