package com.hniois.monitor.controller;

import com.alibaba.fastjson.JSON;
import com.hniois.common.page.Page;
import com.hniois.controller.base.BaseController;
import com.hniois.monitor.entity.Crops;
import com.hniois.monitor.service.CropsManage;
import com.hniois.util.DateUtil;
import com.hniois.util.ExportExcelUtil;
import com.hniois.util.SessionManager;
import com.hniois.util.UuidUtil;
import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.annotation.Resource;
import java.util.List;

@Controller
@RequestMapping("/crop")
public class CropsAction extends BaseController {

    @Resource(name ="cropService")
    private CropsManage cropService;

    private String crop_list="monitor/crop/crop_list";
    private String crop_edit="monitor/crop/crop_edit";
    private String crop_img="monitor/crop/crop_img";
    private String certificate_img="monitor/crop/certificate_img";

    @RequestMapping("/toPage")
    @ResponseBody
    public ModelAndView toPage(Page e){
        ModelAndView mv=this.getModelAndViewToPage(e);
        mv.setViewName(crop_list);
        return mv;
    }

    /**
     * 分页查询
     * @param e
     * @return
     */
    @ResponseBody
    @RequestMapping("/list")
    public String showPage(Crops e)throws Exception{
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        //获取当前页
        int current=getThisPage(e.getPage());
        //获取每页显示条数
        int limit=getThisLimit(e.getLimit());
        e.setOffset((current-1)*limit);
        e.setPagerSize(limit);//每页显示记录数
        Page page = cropService.findPage(e);
        return JSON.toJSONString(page);
    }

    /**
     * 新增 or 编辑
     * @param e
     * @return
     */
    @RequestMapping("/toEdit")
    @ResponseBody
    public ModelAndView edit(Crops e)throws Exception{
        ModelAndView mv=this.getModelAndView();
        Crops crop=new Crops();
        if(StringUtils.isNotEmpty(e.getCrop_id())){
            crop=cropService.find(e);
        }
        crop.setCode(e.getCode());
        mv.addObject("crop",crop);
        mv.setViewName(crop_edit);
        return mv;
    }

    /**
     * 保存新增
     * @param e
     * @return
     */
    @RequestMapping("/add")
    @ResponseBody
    public String add(Crops e)throws  Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        if(!StringUtils.isNotEmpty(e.getCrop_id())){
            String c_id= UuidUtil.get32UUID();
            e.setCrop_id(c_id);
            cropService.save(e);
        }else{
            setMsg(obj,"error","新增失败");
        }
        return obj.toString();
    }

    /**
     * 编辑保存
     * @param e
     * @return
     */
    @RequestMapping("/update")
    @ResponseBody
    public String update(Crops e)throws Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getCrop_id())){
            Crops crop=new Crops();
            crop.setCrop_id(e.getCrop_id());
            if (cropService.findCount(crop)>0){
                cropService.update(e);
            }else{
                setMsg(obj,"error","对象不存在");
            }
        }else{
            setMsg(obj,"error","ID不能为空");
        }
        return obj.toString();
    }


    /**
     * 单个删除
     * @param e
     * @return
     */
    @RequestMapping("/delete")
    @ResponseBody
    public String delete(Crops e)throws Exception{
        JSONObject obj=getMsg();
        if(StringUtils.isNotEmpty(e.getCrop_id())) {
            cropService.delete(e);
        }else {
            setMsg(obj, "error", "删除失败");
        }
        return obj.toString();
    }

    /**
     * 批量删除
     * @param e
     * @return
     */
    @RequestMapping("/deletes")
    @ResponseBody
    public String deletes(Crops e)throws Exception{
        JSONObject obj=getMsg();
        if(e.getData().size()>0){
            cropService.deleteBatch(e);
        }else{
            setMsg(obj,"error","删除失败");
        }
        return obj.toString();
    }

    /**
     * 导出
     * @param e 信息
     * @return json
     * */
    @RequestMapping(value="/doExport")
    @ResponseBody
    public void doExport(Crops e) throws Exception {
        if(StringUtils.isNotEmpty(SessionManager.getFarmID())){
            e.setFarm_id(SessionManager.getFarmID());
        }
        //导出工具
        ExportExcelUtil<Crops> export = new ExportExcelUtil<Crops>();
        //文件名称
        String filename = "cropList" + DateUtil.getTimes();
        //导出数据信息
        List list = cropService.findPage(e).getData();
        //执行导出
        doExport(filename,list,export);
    }


    /**
     * 产品图片
     * @param e 学校信息
     */
    @RequestMapping(value="/toEditImgs")
    public ModelAndView toEditImgs(Crops e) throws Exception{
        ModelAndView mv = this.getModelAndView();
        Crops crop = new Crops();
        if(StringUtils.isNotEmpty(e.getCrop_id())){
            crop = cropService.find(e);
        }
        mv.addObject("crop",crop);
        mv.setViewName(crop_img);
        return mv;
    }

    /**
     * 资质证书
     * @param e 学校信息
     */
    @RequestMapping(value="/toTypeImgs")
    public ModelAndView toTypeImgs(Crops e) throws Exception{
        ModelAndView mv = this.getModelAndView();
        Crops crop = new Crops();
        if(StringUtils.isNotEmpty(e.getCrop_id())){
            crop = cropService.find(e);
        }
        mv.addObject("crop",crop);
        mv.setViewName(certificate_img);
        return mv;
    }

}
